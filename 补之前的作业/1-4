01笔记：

1.新标识符：

''' '''和""" """对应#，表示多行注释，它们中间的所有内容都是注释

//为整除或地板除，推荐读地板除，因为向上取整读天花板除

%为取余，**为幂

print( )是输出，里面的东西不加引号是计算和判断，两内容间用+

not是非，not、or、and使用时后面加括号

位运算下节课一起学

python赋值较简单

三元运算符优化代码：[when_true] if [condition] else [when_false]

in存在，not in不存在

运算优先级：算数，移位，位运算

int整型，float浮点型，bool对错。用于输出type、转换类型



2.积累一些包：

bit()是找二进制代码

bit-length()是确定长度，可直接接于上一个输出之后！

python可以通过引进各种各样的包简化代码

decimal较float不会丢失精度，即其二进制表示没有死角，故有Decimal(3)

`bool` 作用在基本类型变量：`X` 只要不是整型 `0`、浮点型 `0.0`，`bool(X)` 就是 `True`，其余就是 `False`

type( )获取类型信息



3.print输出形式详解（逗号即可）：

sep是实现分隔符，比如多个参数输出时想要输出中间的分隔字符

end换行

file定义输出文件

flush不作缓存

没有参数时，每次输出后都会换行

类似for item in shoplist，会自动找上面的文件

写end='&'不会默认换行



01题目

题目较简单，笔记已体现，不做赘述





02笔记：

1.新东西

计算机有原码、反码和补码，反码的存在类似数学的负数，补码存在因为二进制存在bug

按位非~：0、1互换；按位与&：俩位置都是1才为1；按位或|：俩位置有一个1就是1；按位异或^：俩位置不同才为1，异或操作满足交换律和结合律；按位左右移即加0，格式11>>2(向右移两位)

2.新计算

n<<1:n*2

n>>2:n/2

n<<m：n*2的m次方

n>>m：n/2的n次方

a^=b:快速交换a和b

```
a | (1<<i)  -> 把 i 插入到集合中
a & ~(1<<i) -> 把 i 从集合中删除
a & (1<<i)  -> 判断 i 是否属于该集合（零不属于，非零属于）
```

```
a 补   -> ~a
a 交 b -> a & b
a 并 b -> a | b
a 差 b -> a & (~b)
```

！！！为了获得负数（十进制表示）的补码，需要手动将其和十六进制数`0xffffffff`进行按位与操作，再交给`bin()`进行输出，得到的才是负数的补码表示。print以后保留的是后者。



02题目

class Solution {          #暂时不太懂
    public int singleNumber(int[] nums) {
        int single = 0;
        for (int num : nums) {
            single ^= num;
        }
        return single;
    }
}

